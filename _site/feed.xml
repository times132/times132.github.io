<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko-KR, en-US"><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko-KR, en-US" /><updated>2023-02-20T21:07:07+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Develop Log</title><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><entry><title type="html">[MongoDB] Aggregate</title><link href="http://localhost:4000/db/mongo-aggregate.html" rel="alternate" type="text/html" title="[MongoDB] Aggregate" /><published>2023-02-20T00:00:00+09:00</published><updated>2023-02-20T21:07:07+09:00</updated><id>http://localhost:4000/db/mongo-aggregate</id><content type="html" xml:base="http://localhost:4000/db/mongo-aggregate.html"><![CDATA[<ul>
  <li>find로 처리하기 어려운 데이터를 가공하기 위한 기능</li>
  <li>pipeline 형식으로 동작하며 <strong><code class="language-plaintext highlighter-rouge">match, group, sort 등</code></strong>다양한 스테이지 값 지원 (<a href="https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/">MongoDB Aggregate Stage</a>)</li>
</ul>

<h3 id="rdb와-비교">RDB와 비교</h3>

<table>
  <thead>
    <tr>
      <th>RDB</th>
      <th>MongoDB</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>where</td>
      <td>$match</td>
    </tr>
    <tr>
      <td>group by</td>
      <td>$group</td>
    </tr>
    <tr>
      <td>having</td>
      <td>$match</td>
    </tr>
    <tr>
      <td>select</td>
      <td>$project</td>
    </tr>
    <tr>
      <td>order by</td>
      <td>$sort</td>
    </tr>
    <tr>
      <td>limit</td>
      <td>$limit</td>
    </tr>
    <tr>
      <td>sum</td>
      <td>$sum</td>
    </tr>
    <tr>
      <td>count</td>
      <td>$sum</td>
    </tr>
    <tr>
      <td>join</td>
      <td>$lookup</td>
    </tr>
  </tbody>
</table>

<h3 id="예시">예시</h3>
<ul>
  <li>data
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="p">[{</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"바나나"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">10000</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"사과"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">5000</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"딸기"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">7000</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="err">----------------------------</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"바나나"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">9000</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"사과"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">3000</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"딸기"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">8000</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="err">-----------------------------</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"사과"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">5500</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"딸기"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">7500</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"바나나"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">7700</span><span class="w">
      </span><span class="p">}</span><span class="w">
  </span><span class="p">}]</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>$match
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">db</span><span class="p">.</span><span class="n">blog</span><span class="p">.</span><span class="k">aggregate</span><span class="p">([</span>
  <span class="p">{</span> <span class="err">$</span><span class="k">match</span><span class="p">:</span> <span class="p">{</span><span class="s1">'food.name'</span><span class="p">:</span> <span class="p">{</span><span class="err">$</span><span class="n">eq</span><span class="p">:</span> <span class="s1">'바나나'</span><span class="p">}}}</span>
<span class="p">])</span>
</code></pre></div>    </div>
    <p><img src="/assets/img/post/2023-02-20/match_result.png" alt="match_result" /></p>
  </li>
  <li>$sort
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">db</span><span class="p">.</span><span class="n">blog</span><span class="p">.</span><span class="k">aggregate</span><span class="p">([</span>
  <span class="p">{</span> <span class="err">$</span><span class="k">match</span><span class="p">:</span> <span class="p">{</span><span class="s1">'food.name'</span><span class="p">:</span> <span class="p">{</span><span class="err">$</span><span class="n">eq</span><span class="p">:</span> <span class="s1">'바나나'</span><span class="p">}}},</span>
  <span class="p">{</span> <span class="err">$</span><span class="n">sort</span><span class="p">:</span> <span class="p">{</span><span class="s1">'food.price'</span><span class="p">:</span> <span class="mi">1</span><span class="p">}}</span>                 <span class="o">//</span> <span class="mi">1</span><span class="p">:</span> <span class="k">Asc</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span> <span class="k">Desc</span>
<span class="p">]);</span>
</code></pre></div>    </div>
    <p><img src="/assets/img/post/2023-02-20/sort_result.png" alt="sort_result" /></p>
  </li>
</ul>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="db" /><category term="db" /><summary type="html"><![CDATA[find로 처리하기 어려운 데이터를 가공하기 위한 기능 pipeline 형식으로 동작하며 match, group, sort 등다양한 스테이지 값 지원 (MongoDB Aggregate Stage)]]></summary></entry><entry><title type="html">[CodeUp] 숫자등고선</title><link href="http://localhost:4000/algorithm/%EC%88%AB%EC%9E%90%EB%93%B1%EA%B3%A0%EC%84%A0.html" rel="alternate" type="text/html" title="[CodeUp] 숫자등고선" /><published>2023-02-19T00:00:00+09:00</published><updated>2023-02-20T19:53:18+09:00</updated><id>http://localhost:4000/algorithm/%EC%88%AB%EC%9E%90%EB%93%B1%EA%B3%A0%EC%84%A0</id><content type="html" xml:base="http://localhost:4000/algorithm/%EC%88%AB%EC%9E%90%EB%93%B1%EA%B3%A0%EC%84%A0.html"><![CDATA[<h3 id="문제-설명">문제 설명</h3>
<p>어느날 등산을하다가 길을 찾기 위해 지도를 보다가 땅의 높낮이를 표시되어 있는 등고선을 보면서 문득 2차원 배열로 숫자등고선을 만드는 문제가 생각났다.</p>

<p>여러분들은 배열크기 N과 시작위치 X, Y를 입력받아 숫자등고선을 만드시오.</p>

<p>예를 들어 배열크기가 5이고 시작위치가 3 , 4 라면 3,4로 시작하는 다음과같은 숫자등고선을 만들수 있다.</p>

<p>6 5 4 3 4</p>

<p>5 4 3 2 3</p>

<p>4 3 2 1 2</p>

<p>5 4 3 2 3</p>

<p>6 5 4 3 4</p>

<hr />

<h3 id="입력">입력</h3>

<p>배열의 크기 N의 범위는 1&lt;=N&lt;=100 이며 좌표값 X,Y는 배열크기보다 작다.</p>

<hr />

<h3 id="풀이">풀이</h3>

<p>반복문으로 시작 위치 X, Y를 기준으로 좌표 (1,1) ~ (N,N)까지의 <strong><code class="language-plaintext highlighter-rouge">X좌표-X + Y좌표-Y</code></strong>값으로 각 좌표의 값을 구할 수도 있지만 <strong><code class="language-plaintext highlighter-rouge">DFS</code></strong>를 사용
배열의 기본 값을 0으로 해서 따로 visit 체크가 필요없는 기본적인 <strong><code class="language-plaintext highlighter-rouge">DFS</code></strong> 문제였다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">result</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="n">result</span><span class="p">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

<span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
<span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">):</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
    <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>

    <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
            <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">result</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">result</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">))</span>

<span class="n">bfs</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">','</span><span class="p">,</span><span class="s">''</span><span class="p">)[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="algorithm" /><category term="algorithm" /><summary type="html"><![CDATA[문제 설명 어느날 등산을하다가 길을 찾기 위해 지도를 보다가 땅의 높낮이를 표시되어 있는 등고선을 보면서 문득 2차원 배열로 숫자등고선을 만드는 문제가 생각났다.]]></summary></entry><entry><title type="html">[JPA] @Embedded, @Embeddable</title><link href="http://localhost:4000/java/Embedded.html" rel="alternate" type="text/html" title="[JPA] @Embedded, @Embeddable" /><published>2023-02-06T00:00:00+09:00</published><updated>2023-02-19T20:41:36+09:00</updated><id>http://localhost:4000/java/Embedded</id><content type="html" xml:base="http://localhost:4000/java/Embedded.html"><![CDATA[]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="java" /><category term="jpa" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[백준] ATM</title><link href="http://localhost:4000/algorithm/ATM.html" rel="alternate" type="text/html" title="[백준] ATM" /><published>2023-01-17T00:00:00+09:00</published><updated>2023-02-20T19:53:18+09:00</updated><id>http://localhost:4000/algorithm/ATM</id><content type="html" xml:base="http://localhost:4000/algorithm/ATM.html"><![CDATA[<h3 id="문제-설명">문제 설명</h3>

<p>인하은행에는 ATM이 1대밖에 없다. 지금 이 ATM앞에 N명의 사람들이 줄을 서있다. 사람은 1번부터 N번까지 번호가 매겨져 있으며, i번 사람이 돈을 인출하는데 걸리는 시간은 Pi분이다.</p>

<p>사람들이 줄을 서는 순서에 따라서, 돈을 인출하는데 필요한 시간의 합이 달라지게 된다. 예를 들어, 총 5명이 있고, P1 = 3, P2 = 1, P3 = 4, P4 = 3, P5 = 2 인 경우를 생각해보자.
[1, 2, 3, 4, 5] 순서로 줄을 선다면, 1번 사람은 <strong>3분</strong>만에 돈을 뽑을 수 있다. 2번 사람은 1번 사람이 돈을 뽑을 때 까지 기다려야 하기 때문에, 3+1 = <strong>4분</strong>이 걸리게 된다. 3번 사람은 1번, 2번 사람이 돈을 뽑을 때까지 기다려야 하기 때문에, 
총 3+1+4 = <strong>8분</strong>이 필요하게 된다. 4번 사람은 3+1+4+3 = <strong>11분</strong>, 5번 사람은 3+1+4+3+2 = <strong>13분</strong>이 걸리게 된다. 이 경우에 각 사람이 돈을 인출하는데 필요한 시간의 합은 3+4+8+11+13 = <strong>39분</strong>이 된다.</p>

<p>줄을 [2, 5, 1, 4, 3] 순서로 줄을 서면, 2번 사람은 <strong>1분</strong>만에, 5번 사람은 1+2 = <strong>3분</strong>, 1번 사람은 1+2+3 = <strong>6분</strong>, 4번 사람은 1+2+3+3 = <strong>9분</strong>, 3번 사람은 1+2+3+3+4 = <strong>13분</strong>이 걸리게 된다.
각 사람이 돈을 인출하는데 필요한 시간의 합은 1+3+6+9+13 = <strong>32분</strong>이다. 이 방법보다 더 필요한 시간의 합을 최소로 만들 수는 없다.</p>

<p>줄을 서 있는 사람의 수 N과 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어졌을 때, 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 구하는 프로그램을 작성하시오.</p>

<hr />

<h3 id="입력">입력</h3>

<p>첫째 줄에 사람의 수 N(1 ≤ N ≤ 1,000)이 주어진다. 둘째 줄에는 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어진다. (1 ≤ Pi ≤ 1,000)</p>

<hr />

<h3 id="풀이">풀이</h3>

<p><strong><code class="language-plaintext highlighter-rouge">뒤에 사람이 인출이 끝나는 시간 = 앞 사람이 인출하는 시간 + 본인의 인출 시간</code></strong></p>

<p>즉, <u>앞 사람 인출 시간이 적어야 된다</u>는 것을 의미합니다.</p>

<p>인출 시간이 적은 사람 순으로 정렬하여 각 배열에 이전까지 원소 값을 더해주면 Pi의 사람들의 인출하는데 걸리는 시간이 나오게 됩니다.</p>

<p>마지막으로 모든 사람의 인출 시간을 더한 값이 최소 총 인출 시간입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">p</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span>
<span class="n">p</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
    <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">print</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="algorithm" /><category term="algorithm" /><summary type="html"><![CDATA[문제 설명]]></summary></entry><entry><title type="html">[프로그래머스] 부대복귀</title><link href="http://localhost:4000/algorithm/%EB%B6%80%EB%8C%80%EB%B3%B5%EA%B7%80.html" rel="alternate" type="text/html" title="[프로그래머스] 부대복귀" /><published>2022-01-02T00:00:00+09:00</published><updated>2023-01-03T20:08:26+09:00</updated><id>http://localhost:4000/algorithm/%EB%B6%80%EB%8C%80%EB%B3%B5%EA%B7%80</id><content type="html" xml:base="http://localhost:4000/algorithm/%EB%B6%80%EB%8C%80%EB%B3%B5%EA%B7%80.html"><![CDATA[<h3 id="문제-설명">문제 설명</h3>

<p>강철부대의 각 부대원이 여러 지역에 뿔뿔이 흩어져 특수 임무를 수행 중입니다. 지도에서 강철부대가 위치한 지역을 포함한 각 지역은 유일한 번호로 구분되며, 두 지역 간의 길을 통과하는 데 걸리는 시간은 모두 1로 동일합니다. 임무를 수행한 각 부대원은 지도 정보를 이용하여 최단시간에 부대로 복귀하고자 합니다. 다만 적군의 방해로 인해, 임무의 시작 때와 다르게 되돌아오는 경로가 없어져 복귀가 불가능한 부대원도 있을 수 있습니다.</p>

<p>강철부대가 위치한 지역을 포함한 총지역의 수 <strong><code class="language-plaintext highlighter-rouge">n</code></strong>, 두 지역을 왕복할 수 있는 길 정보를 담은 2차원 정수 배열 <strong><code class="language-plaintext highlighter-rouge">roads</code></strong>, 각 부대원이 위치한 서로 다른 지역들을 나타내는 정수 배열 <strong><code class="language-plaintext highlighter-rouge">sources</code></strong>, 강철부대의 지역 <strong><code class="language-plaintext highlighter-rouge">destination</code></strong>이 주어졌을 때, 주어진 <strong><code class="language-plaintext highlighter-rouge">sources</code></strong>의 원소 순서대로 강철부대로 복귀할 수 있는 최단시간을 담은 배열을 return하는 solution 함수를 완성해주세요. 복귀가 불가능한 경우 해당 부대원의 최단시간은 -1입니다.</p>

<hr />

<h3 id="입력">입력</h3>

<ul>
  <li>3 ≤ <strong><code class="language-plaintext highlighter-rouge">n</code></strong> ≤ 100,000
    <ul>
      <li>각 지역은 정수 1부터 <strong><code class="language-plaintext highlighter-rouge">n</code></strong>까지의 번호로 구분됩니다.</li>
    </ul>
  </li>
  <li>2 ≤ <strong><code class="language-plaintext highlighter-rouge">roads</code></strong>의 길이 ≤ 500,000
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">roads</code></strong>의 원소의 길이 = 2</li>
      <li><strong><code class="language-plaintext highlighter-rouge">roads</code></strong>의 원소는 [a, b] 형태로 두 지역 a, b가 서로 왕복할 수 있음을 의미합니다.(1 ≤ a, b ≤ n, a ≠ b)</li>
      <li>동일한 정보가 중복해서 주어지지 않습니다.
        <ul>
          <li>동일한 [a, b]가 중복해서 주어지지 않습니다.</li>
          <li>[a, b]가 있다면 [b, a]는 주어지지 않습니다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>1 ≤ <strong><code class="language-plaintext highlighter-rouge">sources</code></strong>의 길이 ≤ 500
    <ul>
      <li>1 ≤ <strong><code class="language-plaintext highlighter-rouge">sources[i]</code></strong> ≤ n</li>
    </ul>
  </li>
  <li>1 ≤ <strong><code class="language-plaintext highlighter-rouge">destination</code></strong> ≤ n</li>
</ul>

<hr />

<h3 id="풀이">풀이</h3>

<p><strong><code class="language-plaintext highlighter-rouge">BFS</code></strong>로 각 노드에서 출발해서 최단 거리를 구하는 방법과 <strong><code class="language-plaintext highlighter-rouge">다익스트라</code></strong> 알고리즘을 이용해 최단 거리를 구하는 방법 중 다익스트라 알고리즘을 사용하였습니다.
<br />
다익스트라는 가중치를 사용하지만 위 문제에는 가중치가 1로 고정되어있어 따로 Node 클래스를 만들지 않았습니다.
<br /></p>

<p>각 노드에서 거리를 기본 <strong><code class="language-plaintext highlighter-rouge">-1</code></strong>로 설정하고 <strong><code class="language-plaintext highlighter-rouge">Dijkstra</code></strong> 함수에서 방문 하지 않은 각 노드를 순환하면서 거리를 +1 하면서 구하는 방식 입니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">graph</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dist</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Dijkstra</span><span class="o">(</span><span class="kt">int</span> <span class="n">destination</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">destination</span><span class="o">);</span>
        <span class="n">dist</span><span class="o">[</span><span class="n">destination</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        
        <span class="k">while</span><span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">pq</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">pq</span><span class="o">).</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">nq</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">pq</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">dist</span><span class="o">[</span><span class="n">nq</span><span class="o">]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
                <span class="n">dist</span><span class="o">[</span><span class="n">nq</span><span class="o">]</span> <span class="o">=</span> <span class="n">dist</span><span class="o">[</span><span class="n">pq</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
                <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nq</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">roads</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">sources</span><span class="o">,</span> <span class="kt">int</span> <span class="n">destination</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">dist</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">sources</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">dist</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">graph</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">road</span> <span class="o">:</span> <span class="n">roads</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">road</span><span class="o">[</span><span class="mi">0</span><span class="o">]).</span><span class="na">add</span><span class="o">(</span><span class="n">road</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
            <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">road</span><span class="o">[</span><span class="mi">1</span><span class="o">]).</span><span class="na">add</span><span class="o">(</span><span class="n">road</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
        <span class="o">}</span>
        <span class="nc">Dijkstra</span><span class="o">(</span><span class="n">destination</span><span class="o">);</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">sources</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">dist</span><span class="o">[</span><span class="n">sources</span><span class="o">[</span><span class="n">i</span><span class="o">]];</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="algorithm" /><category term="algorithm" /><summary type="html"><![CDATA[문제 설명]]></summary></entry><entry><title type="html">Java 테스트 게시글</title><link href="http://localhost:4000/java/test-java-content.html" rel="alternate" type="text/html" title="Java 테스트 게시글" /><published>2022-01-01T00:00:00+09:00</published><updated>2023-01-03T20:08:26+09:00</updated><id>http://localhost:4000/java/test-java-content</id><content type="html" xml:base="http://localhost:4000/java/test-java-content.html"><![CDATA[<p>자바 관련 내용2</p>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="java" /><category term="spring" /><summary type="html"><![CDATA[자바 관련 내용2]]></summary></entry></feed>