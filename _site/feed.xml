<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko-KR, en-US"><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko-KR, en-US" /><updated>2023-04-03T21:10:25+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Develop Log</title><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><entry><title type="html">[백준] 로봇 청소기</title><link href="http://localhost:4000/algorithm/%EB%A1%9C%EB%B4%87%EC%B2%AD%EC%86%8C%EA%B8%B0.html" rel="alternate" type="text/html" title="[백준] 로봇 청소기" /><published>2023-04-02T00:00:00+09:00</published><updated>2023-04-03T21:10:25+09:00</updated><id>http://localhost:4000/algorithm/%EB%A1%9C%EB%B4%87%EC%B2%AD%EC%86%8C%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/algorithm/%EB%A1%9C%EB%B4%87%EC%B2%AD%EC%86%8C%EA%B8%B0.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#문제-설명" id="markdown-toc-문제-설명">문제 설명</a></li>
  <li><a href="#입력" id="markdown-toc-입력">입력</a></li>
  <li><a href="#출력" id="markdown-toc-출력">출력</a></li>
  <li><a href="#풀이" id="markdown-toc-풀이">풀이</a></li>
</ul>

<h3 id="문제-설명">문제 설명</h3>
<p>로봇 청소기와 방의 상태가 주어졌을 때, 청소하는 영역의 개수를 구하는 프로그램을 작성하시오.</p>

<p>로봇 청소기가 있는 방은 M×N 크기의 직사각형으로 나타낼 수 있으며,
1×1 크기의 정사각형 칸으로 나누어져 있다. 각각의 칸은 벽 또는 빈 칸이다. 청소기는 바라보는 방향이 있으며, 이 방향은 동, 서, 남, 북 중 하나이다. 방의 각 칸은 좌표
(r, c)로 나타낼 수 있고, 가장 북쪽 줄의 가장 서쪽 칸의 좌표가 (0, 0), 가장 남쪽 줄의 가장 동쪽 칸의 좌표가 (N-1, M-1)이다. 즉, 좌표 (r, c)는 북쪽에서 (r+1)번째에 있는 줄의 서쪽에서 (c+1)번째 칸을 가리킨다. 처음에 빈 칸은 전부 청소되지 않은 상태이다.</p>

<p>로봇 청소기는 다음과 같이 작동한다.</p>

<ol>
  <li>현재 칸이 아직 청소되지 않은 경우, 현재 칸을 청소한다.</li>
  <li>현재 칸의 주변 4칸 중 청소되지 않은 빈 칸이 없는 경우,
    <ol>
      <li>바라보는 방향을 유지한 채로 한 칸 후진할 수 있다면 한 칸 후진하고 1번으로 돌아간다.</li>
      <li>바라보는 방향의 뒤쪽 칸이 벽이라 후진할 수 없다면 작동을 멈춘다.</li>
    </ol>
  </li>
  <li>현재 칸의 주변 4칸 중 청소되지 않은 빈 칸이 있는 경우,
    <ol>
      <li>반시계 방향으로 90도 회전한다.</li>
      <li>바라보는 방향을 기준으로 앞쪽 칸이 청소되지 않은 빈 칸인 경우 한 칸 전진한다.</li>
      <li>1번으로 돌아간다.</li>
    </ol>
  </li>
</ol>

<hr />

<h3 id="입력">입력</h3>

<p>첫째 줄에 방의 크기 N과 M이 입력된다. (3 &lt;= N, M &lt;= 50) 둘째 줄에 처음에 로봇 청소기가 있는 칸의 좌표 (r, c)와 처음에 로봇 청소기가 바라보는 방향 d가 입력된다.
d가 0인 경우 북쪽, 1인 경우 동쪽, 2인 경우 남쪽, 3인 경우 서쪽을 바라보고 있는 것이다.</p>

<p>셋째 줄부터 N개의 줄에 각 장소의 상태를 나타내는 N×M개의 값이 한 줄에 M개씩 입력된다. i번째 줄의 j번째 값은 칸 (i, j)의 상태를 나타내며, 이 값이 0인 경우 (i, j)가 청소되지 않은 빈 칸이고, 1인 경우
(i, j)에 벽이 있는 것이다. 방의 가장 북쪽, 가장 남쪽, 가장 서쪽, 가장 동쪽 줄 중 하나 이상에 위치한 모든 칸에는 벽이 있다. 로봇 청소기가 있는 칸은 항상 빈 칸이다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>11 10
7 4 0
1 1 1 1 1 1 1 1 1 1
1 0 0 0 0 0 0 0 0 1
1 0 0 0 1 1 1 1 0 1
1 0 0 1 1 0 0 0 0 1
1 0 1 1 0 0 0 0 0 1
1 0 0 0 0 0 0 0 0 1
1 0 0 0 0 0 0 1 0 1
1 0 0 0 0 0 1 1 0 1
1 0 0 0 0 0 1 1 0 1
1 0 0 0 0 0 0 0 0 1
1 1 1 1 1 1 1 1 1 1
</code></pre></div></div>

<hr />

<h3 id="출력">출력</h3>

<p>로봇 청소기가 작동을 시작한 후 작동을 멈출 때까지 청소하는 칸의 개수를 출력한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>57
</code></pre></div></div>

<h3 id="풀이">풀이</h3>

<p>하나의 좌표로 부터 계속 타고 들어가야되므로 BFS보단 DFS로 푸는 것이 맞다. 일반적인 DFS와는 다른 몇가지 조건이 있는데</p>
<ol>
  <li>상,하,좌,우에 청소하지 않은 곳이 있으면 90도 회전 후 전진</li>
  <li>상,하,좌,우에 청소되지 않은 빈칸이 없는 경우 후진</li>
</ol>

<p>이 두가지 조건을 구현하면서 DFS를 적용하면 된다.</p>

<p>바라보는 방향 <strong>d</strong>가 0(북)이면 (-1,0), (0,1), (1,0), (0,-1) 순으로 이동하고, 1(동)이면 (0,-1), (-1,0), (0,1), (1,0)으로 이동한다.</p>

<p>회전하는 좌표를 아래 코드와 같이 (-1,0), (0,1), (1,0), (0,-1)으로 하면 북일 때는 <code class="language-plaintext highlighter-rouge">0 1 2 3</code>, 동일 때는 <code class="language-plaintext highlighter-rouge">3 0 1 2</code>, 남일 때는 <code class="language-plaintext highlighter-rouge">2 3 0 1</code>, 서일 때는 <code class="language-plaintext highlighter-rouge">1 2 3 0</code> 순으로 이동하면 된다.</p>

<p>규칙은 금방 찾았는데 구현하는데 시간이 좀 걸렸다. 처음에는 똑같은 리스트를 하나 더 붙여서 계산하는 방식으로 구현하였는데 너무 복잡하고 코드가 난잡해 <strong>나머지</strong>를 구하는 방법으로 구현했다.</p>

<p>회전하면서 청소가 가능한 경우는 stack에 넣어주고 enabled값을 1로 바꿔주었다. 4방향을 확인하면서 불가능한 경우(enabled = 0)에는 뒤로 갈 수 있으면 후진 아니면 DFS를 종료 시켰다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">room</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
<span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">room</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())))</span>

<span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">):</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
    <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">r</span><span class="p">,</span><span class="n">c</span><span class="p">))</span>
    <span class="n">room</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
        <span class="n">enabled</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
            <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">d</span><span class="o">+</span><span class="mi">3</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span>
            <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">d</span><span class="p">],</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">d</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">room</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">))</span>
                <span class="n">result</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">enabled</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="n">room</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
                <span class="k">break</span>
        <span class="k">if</span> <span class="n">enabled</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">bx</span><span class="p">,</span> <span class="n">by</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="n">dx</span><span class="p">[</span><span class="n">d</span><span class="p">],</span> <span class="n">y</span> <span class="o">-</span> <span class="n">dy</span><span class="p">[</span><span class="n">d</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">room</span><span class="p">[</span><span class="n">bx</span><span class="p">][</span><span class="n">by</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">bx</span><span class="p">,</span><span class="n">by</span><span class="p">))</span>
            <span class="k">if</span> <span class="n">room</span><span class="p">[</span><span class="n">bx</span><span class="p">][</span><span class="n">by</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">result</span>

<span class="k">print</span><span class="p">(</span><span class="n">dfs</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">))</span>

</code></pre></div></div>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="algorithm" /><category term="DFS/BFS" /></entry><entry><title type="html">[백준] 맥주 마시면서 걸어가기</title><link href="http://localhost:4000/algorithm/%EB%A7%A5%EC%A3%BC%EB%A7%88%EC%8B%9C%EB%A9%B4%EC%84%9C%EA%B1%B8%EC%96%B4%EA%B0%80%EA%B8%B0.html" rel="alternate" type="text/html" title="[백준] 맥주 마시면서 걸어가기" /><published>2023-03-22T00:00:00+09:00</published><updated>2023-03-22T21:39:20+09:00</updated><id>http://localhost:4000/algorithm/%EB%A7%A5%EC%A3%BC%EB%A7%88%EC%8B%9C%EB%A9%B4%EC%84%9C%EA%B1%B8%EC%96%B4%EA%B0%80%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/algorithm/%EB%A7%A5%EC%A3%BC%EB%A7%88%EC%8B%9C%EB%A9%B4%EC%84%9C%EA%B1%B8%EC%96%B4%EA%B0%80%EA%B8%B0.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#문제-설명" id="markdown-toc-문제-설명">문제 설명</a></li>
  <li><a href="#입력" id="markdown-toc-입력">입력</a></li>
  <li><a href="#출력" id="markdown-toc-출력">출력</a></li>
  <li><a href="#풀이" id="markdown-toc-풀이">풀이</a></li>
</ul>

<h3 id="문제-설명">문제 설명</h3>
<p>송도에 사는 상근이와 친구들은 송도에서 열리는 펜타포트 락 페스티벌에 가려고 한다. 올해는 맥주를 마시면서 걸어가기로 했다. 출발은 상근이네 집에서 하고, 맥주 한 박스를 들고 출발한다. 맥주 한 박스에는 맥주가 20개 들어있다. 목이 마르면 안되기 때문에 50미터에 한 병씩 마시려고 한다. 즉, 50미터를 가려면 그 직전에 맥주 한 병을 마셔야 한다.</p>

<p>상근이의 집에서 페스티벌이 열리는 곳은 매우 먼 거리이다. 따라서, 맥주를 더 구매해야 할 수도 있다. 미리 인터넷으로 조사를 해보니 다행히도 맥주를 파는 편의점이 있다. 편의점에 들렸을 때, 빈 병은 버리고 새 맥주 병을 살 수 있다. 하지만, 박스에 들어있는 맥주는 20병을 넘을 수 없다. 편의점을 나선 직후에도 50미터를 가기 전에 맥주 한 병을 마셔야 한다.</p>

<p>편의점, 상근이네 집, 펜타포트 락 페스티벌의 좌표가 주어진다. 상근이와 친구들이 행복하게 페스티벌에 도착할 수 있는지 구하는 프로그램을 작성하시오.</p>

<hr />

<h3 id="입력">입력</h3>

<p>첫째 줄에 테스트 케이스의 개수 t가 주어진다. (t ≤ 50)</p>

<p>각 테스트 케이스의 첫째 줄에는 맥주를 파는 편의점의 개수 n이 주어진다. (0 ≤ n ≤ 100).</p>

<p>다음 n+2개 줄에는 상근이네 집, 편의점, 펜타포트 락 페스티벌 좌표가 주어진다. 각 좌표는 두 정수 x와 y로 이루어져 있다. (두 값 모두 미터, -32768 ≤ x, y ≤ 32767)</p>

<p>송도는 직사각형 모양으로 생긴 도시이다. 두 좌표 사이의 거리는 x 좌표의 차이 + y 좌표의 차이 이다. (맨해튼 거리)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
2
0 0
1000 0
1000 1000
2000 1000
2
0 0
1000 0
2000 1000
2000 2000
</code></pre></div></div>

<hr />

<h3 id="출력">출력</h3>

<p>각 테스트 케이스에 대해서 상근이와 친구들이 행복하게 페스티벌에 갈 수 있으면 “happy”, 중간에 맥주가 바닥나서 더 이동할 수 없으면 “sad”를 출력한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>happy
sad
</code></pre></div></div>

<h3 id="풀이">풀이</h3>

<p>문제 자체는 DFS/BFS로 풀어야되는 걸 알았는데 어떤 방식으로 풀어야될지 고민을 오래했던 것 같다. (맨날 <strong><code class="language-plaintext highlighter-rouge">dx,dy</code></strong> 로 +-1씩 움직이는 DFS/BFS만 풀어서…)</p>

<p>처음에는 50씩 이동하면서 맥주를 하나 빼는 방식으로 했었는데, <strong><code class="language-plaintext highlighter-rouge">맥주병 수 * 최대 미터</code></strong>이내면 어떤 경로로 가도 상관없을 것이라 <strong><code class="language-plaintext highlighter-rouge">1000</code></strong>을 기준으로 BFS를 구현했다.</p>

<p>시작 좌표는 queue에 넣고 편의점 좌표를 songdo 리스트에 추가 후 DFS를 수행하면서 큐에서 빼낸 좌표에서 갈 수 있는 편의점을 다시 큐에 넣고 songdo 리스트에서 제거하는 방식으로 구현했다.</p>

<p>페스티벌 좌표로 갈 수 있는 지는 큐에서 뽑은 후 검사 후 가능하면 BFS를 종료하였다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="n">t</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
    <span class="n">songdo</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
    <span class="n">hx</span><span class="p">,</span> <span class="n">hy</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span> <span class="c1"># 집 좌표
</span>    <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">hx</span><span class="p">,</span><span class="n">hy</span><span class="p">))</span>

    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">cx</span><span class="p">,</span> <span class="n">cy</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span> <span class="c1"># 편의점 좌표
</span>        <span class="n">songdo</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">cx</span><span class="p">,</span><span class="n">cy</span><span class="p">))</span>
    <span class="n">fx</span><span class="p">,</span> <span class="n">fy</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span> <span class="c1"># 페스티벌 좌표
</span>    
    <span class="n">answer</span> <span class="o">=</span> <span class="s">"sad"</span>
    <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
        <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">fx</span><span class="p">)</span> <span class="o">+</span> <span class="nb">abs</span><span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="n">fy</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">:</span>
            <span class="n">answer</span> <span class="o">=</span> <span class="s">"happy"</span>
            <span class="k">break</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">songdo</span><span class="p">:</span>
            <span class="n">mx</span><span class="p">,</span> <span class="n">my</span> <span class="o">=</span> <span class="n">m</span>
            <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">mx</span><span class="p">)</span> <span class="o">+</span> <span class="nb">abs</span><span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="n">my</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">:</span>
                <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">mx</span><span class="p">,</span><span class="n">my</span><span class="p">))</span>
                <span class="n">songdo</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
                
    <span class="n">results</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>

<span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">results</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="algorithm" /><category term="DFS/BFS" /></entry><entry><title type="html">[백준] 상금헌터</title><link href="http://localhost:4000/algorithm/%EC%83%81%EA%B8%88%ED%97%8C%ED%84%B0.html" rel="alternate" type="text/html" title="[백준] 상금헌터" /><published>2023-03-16T00:00:00+09:00</published><updated>2023-03-22T21:39:11+09:00</updated><id>http://localhost:4000/algorithm/%EC%83%81%EA%B8%88%ED%97%8C%ED%84%B0</id><content type="html" xml:base="http://localhost:4000/algorithm/%EC%83%81%EA%B8%88%ED%97%8C%ED%84%B0.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#문제-설명" id="markdown-toc-문제-설명">문제 설명</a></li>
  <li><a href="#입력" id="markdown-toc-입력">입력</a></li>
  <li><a href="#출력" id="markdown-toc-출력">출력</a></li>
  <li><a href="#풀이" id="markdown-toc-풀이">풀이</a></li>
</ul>

<h3 id="문제-설명">문제 설명</h3>
<p>2017년에 이어, 2018년에도 카카오 코드 페스티벌이 개최된다!</p>

<p>카카오 코드 페스티벌에서 빠질 수 없는 것은 바로 상금이다. 2017년에 개최된 제1회 코드 페스티벌에서는, 본선 진출자 100명 중 21명에게 아래와 같은 기준으로 상금을 부여하였다.</p>

<table>
  <thead>
    <tr>
      <th>순위</th>
      <th>상금</th>
      <th>인원</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1등</td>
      <td>500만원</td>
      <td>1명</td>
    </tr>
    <tr>
      <td>2등</td>
      <td>300만원</td>
      <td>2명</td>
    </tr>
    <tr>
      <td>3등</td>
      <td>200만원</td>
      <td>3명</td>
    </tr>
    <tr>
      <td>4등</td>
      <td>50만원</td>
      <td>4명</td>
    </tr>
    <tr>
      <td>5등</td>
      <td>30만원</td>
      <td>5명</td>
    </tr>
    <tr>
      <td>6등</td>
      <td>10만원</td>
      <td>6명</td>
    </tr>
  </tbody>
</table>

<p>2018년에 개최될 제2회 코드 페스티벌에서는 상금의 규모가 확대되어, 본선 진출자 64명 중 31명에게 아래와 같은 기준으로 상금을 부여할 예정이다.</p>

<table>
  <thead>
    <tr>
      <th>순위</th>
      <th>상금</th>
      <th>인원</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1등</td>
      <td>512만원</td>
      <td>1명</td>
    </tr>
    <tr>
      <td>2등</td>
      <td>256만원</td>
      <td>2명</td>
    </tr>
    <tr>
      <td>3등</td>
      <td>128만원</td>
      <td>4명</td>
    </tr>
    <tr>
      <td>4등</td>
      <td>64만원</td>
      <td>8명</td>
    </tr>
    <tr>
      <td>5등</td>
      <td>32만원</td>
      <td>16명</td>
    </tr>
  </tbody>
</table>

<p>제이지는 자신이 코드 페스티벌에 출전하여 받을 수 있을 상금이 얼마인지 궁금해졌다. 그는 자신이 두 번의 코드 페스티벌 본선 대회에서 얻을 수 있을 총 상금이 얼마인지 알아보기 위해, 상상력을 발휘하여 아래와 같은 가정을 하였다.</p>

<p>제1회 코드 페스티벌 본선에 진출하여 a등(1 ≤ a ≤ 100)등을 하였다. 단, 진출하지 못했다면 a = 0으로 둔다.</p>

<p>제2회 코드 페스티벌 본선에 진출하여 b등(1 ≤ b ≤ 64)등을 할 것이다. 단, 진출하지 못했다면 b = 0으로 둔다.</p>

<p>제이지는 이러한 가정에 따라, 자신이 받을 수 있는 총 상금이 얼마인지를 알고 싶어한다.</p>

<hr />

<h3 id="입력">입력</h3>

<p>첫 번째 줄에 제이지가 상상력을 발휘하여 가정한 횟수 <strong><code class="language-plaintext highlighter-rouge">T(1 ≤ T ≤ 1,000)</code></strong>가 주어진다.</p>

<p>다음 T개 줄에는 한 줄에 하나씩 제이지가 해본 가정에 대한 정보가 주어진다. 각 줄에는 두 개의 음이 아닌 정수 <strong><code class="language-plaintext highlighter-rouge">a(0 ≤ a ≤ 100)</code></strong>와 <strong><code class="language-plaintext highlighter-rouge">b(0 ≤ b ≤ 64)</code></strong>가 공백 하나를 사이로 두고 주어진다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6
8 4
13 19
8 10
18 18
8 25
13 16
</code></pre></div></div>

<hr />

<h3 id="출력">출력</h3>

<p>각 가정이 성립할 때 제이지가 받을 상금을 원 단위의 정수로 한 줄에 하나씩 출력한다. 입력이 들어오는 순서대로 출력해야 한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1780000
620000
1140000
420000
820000
620000
</code></pre></div></div>

<h3 id="풀이">풀이</h3>

<p>1회, 2회차 등수에 대한 상금을 리스트에 하드코딩해서 입력받는 등수에 따라 상금을 계산하게 작성했다.</p>

<p>상금을 받지 못하는 등수부터는 상금 총합에 0원을 더하도록 했다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">first</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="n">second</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">]</span>

<span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
    <span class="n">reward</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">if</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="mi">22</span><span class="p">:</span>
        <span class="n">reward</span> <span class="o">+=</span> <span class="n">first</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">*</span> <span class="mi">10000</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">reward</span> <span class="o">+=</span> <span class="mi">0</span>

    <span class="k">if</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="mi">32</span><span class="p">:</span>
        <span class="n">reward</span> <span class="o">+=</span> <span class="n">second</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">*</span> <span class="mi">10000</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">reward</span> <span class="o">+=</span> <span class="mi">0</span>
    <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">reward</span><span class="p">)</span>

<span class="k">for</span> <span class="n">reward</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">reward</span><span class="p">)</span>
    
</code></pre></div></div>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="algorithm" /><category term="Math" /></entry><entry><title type="html">[백준] 영역 구하기</title><link href="http://localhost:4000/algorithm/%EC%98%81%EC%97%AD%EA%B5%AC%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="[백준] 영역 구하기" /><published>2023-03-06T00:00:00+09:00</published><updated>2023-03-19T22:32:26+09:00</updated><id>http://localhost:4000/algorithm/%EC%98%81%EC%97%AD%EA%B5%AC%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/algorithm/%EC%98%81%EC%97%AD%EA%B5%AC%ED%95%98%EA%B8%B0.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#문제-설명" id="markdown-toc-문제-설명">문제 설명</a></li>
  <li><a href="#입력" id="markdown-toc-입력">입력</a></li>
  <li><a href="#출력" id="markdown-toc-출력">출력</a></li>
  <li><a href="#풀이" id="markdown-toc-풀이">풀이</a></li>
</ul>

<h3 id="문제-설명">문제 설명</h3>
<p>눈금의 간격이 1인 <strong><code class="language-plaintext highlighter-rouge">M×N(M,N≤100)</code></strong>크기의 모눈종이가 있다. 이 모눈종이 위에 눈금에 맞추어 K개의 직사각형을 그릴 때, 이들 K개의 직사각형의 내부를 제외한 나머지 부분이 몇 개의 분리된 영역으로 나누어진다.</p>

<p>예를 들어 M=5, N=7 인 모눈종이 위에 &lt;그림 1&gt;과 같이 직사각형 3개를 그렸다면, 그 나머지 영역은 &lt;그림 2&gt;와 같이 3개의 분리된 영역으로 나누어지게 된다.</p>

<p><img src="/assets/img/post/2023-03-06/2583.png" alt="2583" class="centered" /></p>

<p>&lt;그림 2&gt;와 같이 분리된 세 영역의 넓이는 각각 1, 7, 13이 된다.</p>

<p>M, N과 K 그리고 K개의 직사각형의 좌표가 주어질 때, K개의 직사각형 내부를 제외한 나머지 부분이 몇 개의 분리된 영역으로 나누어지는지, 그리고 분리된 각 영역의 넓이가 얼마인지를 구하여 이를 출력하는 프로그램을 작성하시오.</p>

<hr />

<h3 id="입력">입력</h3>

<p>첫째 줄에 <strong><code class="language-plaintext highlighter-rouge">M과 N</code></strong>, 그리고 K가 빈칸을 사이에 두고 차례로 주어진다. <strong><code class="language-plaintext highlighter-rouge">M, N, K</code></strong>는 모두 100 이하의 자연수이다.</p>

<p>둘째 줄부터 <strong><code class="language-plaintext highlighter-rouge">K</code></strong>개의 줄에는 한 줄에 하나씩 직사각형의 왼쪽 아래 꼭짓점의 x, y좌표값과 오른쪽 위 꼭짓점의 x, y좌표값이 빈칸을 사이에 두고 차례로 주어진다.</p>

<p>모눈종이의 왼쪽 아래 꼭짓점의 좌표는 (0,0)이고, 오른쪽 위 꼭짓점의 좌표는(N,M)이다. 입력되는 K개의 직사각형들이 모눈종이 전체를 채우는 경우는 없다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5 7 3
0 2 4 4
1 1 2 5
4 0 6 2
</code></pre></div></div>

<hr />

<h3 id="출력">출력</h3>

<p>첫째 줄에 분리되어 나누어지는 영역의 개수를 출력한다. 둘째 줄에는 각 영역의 넓이를 오름차순으로 정렬하여 빈칸을 사이에 두고 출력한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3
1 7 13
</code></pre></div></div>

<h3 id="풀이">풀이</h3>

<p>백준 실버1레벨 이어서 풀어봤는데 정답률이 높은 이유가 있었다. 특별한 조건이 없는 기본적인 bfs로 풀었다.</p>

<p><strong><code class="language-plaintext highlighter-rouge">M * N</code></strong> 리스트를 만들고 입력 받은 직사각형 좌표를 돌면서 1로 채운 후, list를 탐색하면서 좌표의 값이 0인 곳만 bfs를 돌면서</p>

<p>넓이를 구한 후 결과 result에 저장해서 크기와 정렬한 값을 출력하면 된다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="nb">list</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">)]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">k</span><span class="p">):</span>
    <span class="n">y1</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">y2</span><span class="p">,</span> <span class="n">x2</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">y1</span><span class="p">,</span> <span class="n">y2</span><span class="p">):</span>
            <span class="nb">list</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

<span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
<span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
    <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">))</span>
    <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
        <span class="nb">list</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
            <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="nb">list</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">))</span>
                <span class="nb">list</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="n">result</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">result</span>

<span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">bfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">))</span>
<span class="n">result</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">result</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="algorithm" /><category term="DFS/BFS" /></entry><entry><title type="html">[CodeUp] Up 2</title><link href="http://localhost:4000/algorithm/Up2.html" rel="alternate" type="text/html" title="[CodeUp] Up 2" /><published>2023-03-04T00:00:00+09:00</published><updated>2023-03-19T22:32:26+09:00</updated><id>http://localhost:4000/algorithm/Up2</id><content type="html" xml:base="http://localhost:4000/algorithm/Up2.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#문제-설명" id="markdown-toc-문제-설명">문제 설명</a></li>
  <li><a href="#입력" id="markdown-toc-입력">입력</a></li>
  <li><a href="#풀이" id="markdown-toc-풀이">풀이</a></li>
</ul>

<h3 id="문제-설명">문제 설명</h3>
<p>재현이는 Up 1 문제에서 자기의 집을 띄우는데 성공하였다!</p>

<p>하지만 헬륨이 빠지면서 집은 다시 땅으로 내려오게 되었다.</p>

<p>헬륨이 왜 빠졌는지를 보자 풍선의 위치가 문제인 것을 알게 되었다.</p>

<p>지붕에는 층이 있다. 층은 0부터 9까지이다.</p>

<p>재현이는 지붕의 0층에 모든 풍선을 달자 연결부위가 약해져서 풍선이 날아간 것으로 추측한다.</p>

<p>재현이는 그래서 각 층에는 서로 최대한 많이 연결되어 있는 곳에만 풍선을 달려고 한다.</p>

<hr />

<h3 id="입력">입력</h3>

<p>첫번째 줄에 <strong><code class="language-plaintext highlighter-rouge">m, n</code></strong>이 입력된다.(1&lt;=m,n&lt;=19)</p>

<p>두번째 줄에 지붕의 지도가 <strong><code class="language-plaintext highlighter-rouge">m*n</code></strong>형식으로 입력된다.</p>

<p>숫자는 층이고 -1은 풍선을 달 수 없는 곳이다.</p>

<hr />

<h3 id="풀이">풀이</h3>

<p>지붕의 지도를 돌면서 각 층의 최대 연결 크기를 구하면 되는 문제였다. <strong><code class="language-plaintext highlighter-rouge">지붕의 층 -&gt; 지도의 x좌표 -&gt; 지도의 y좌표</code></strong> 순으로 for문을 돌렸다.</p>

<p>지도에서 층을 찾으면 bfs를 실행하고 bfs에서는 상하좌우를 탐색하면서 탐색한 곳은 -1로 바꾸면서 최종적으로 탐색한 갯수를 리턴한다.</p>

<p>리턴한 값은 임시 변수에 저장하고 지도의 각 층을 마저 탐색 후 최대 값을 출력하면 된다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">roof</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
    <span class="n">roof</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())))</span>

<span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
<span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">floor</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
    <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">))</span>
    <span class="n">roof</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>

    <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
            <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">roof</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="n">floor</span><span class="p">:</span>
                <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">))</span>
                <span class="n">roof</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
                <span class="n">result</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">roof</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="n">i</span><span class="p">:</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="n">bfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">result</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="algorithm" /><category term="DFS/BFS" /></entry><entry><title type="html">[CodeUp] 그림판 채우기</title><link href="http://localhost:4000/algorithm/%EA%B7%B8%EB%A6%BC%ED%8C%90%EC%B1%84%EC%9A%B0%EA%B8%B0.html" rel="alternate" type="text/html" title="[CodeUp] 그림판 채우기" /><published>2023-02-21T00:00:00+09:00</published><updated>2023-03-06T20:13:05+09:00</updated><id>http://localhost:4000/algorithm/%EA%B7%B8%EB%A6%BC%ED%8C%90%EC%B1%84%EC%9A%B0%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/algorithm/%EA%B7%B8%EB%A6%BC%ED%8C%90%EC%B1%84%EC%9A%B0%EA%B8%B0.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#문제-설명" id="markdown-toc-문제-설명">문제 설명</a></li>
  <li><a href="#입력" id="markdown-toc-입력">입력</a></li>
  <li><a href="#풀이" id="markdown-toc-풀이">풀이</a></li>
</ul>

<h3 id="문제-설명">문제 설명</h3>
<p><strong><code class="language-plaintext highlighter-rouge">10 * 10</code></strong> 크기의 그림이 있다.
이 그림에 그림판 색 채우기 기능을 구현하시오.</p>

<p>(단, 원점은 왼쪽 위 끝이고, 값은 오른쪽, 값은 아래로 갈수록 증가한다.)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>__________
_____****_
_____*__*_
__*******_
__*__*_**_
__*__****_
__*____*__
__*____*__
__******__
__________
6 2
</code></pre></div></div>

<hr />

<h3 id="입력">입력</h3>

<p><strong><code class="language-plaintext highlighter-rouge">10 * 10</code></strong> 크기의 그림과 색칠할 좌표의 <strong><code class="language-plaintext highlighter-rouge">x, y</code></strong> 값이 차례로 입력된다.</p>
<ul>
  <li>_ 는 색칠되지 않은 부분이고 * 는 색칠된 부분이다.</li>
</ul>

<hr />

<h3 id="풀이">풀이</h3>

<p>시작 좌표 <strong><code class="language-plaintext highlighter-rouge">x, y</code></strong> 부터 <strong><code class="language-plaintext highlighter-rouge">*</code></strong>로 둘러쌓인 영역을 탐색하면서 채워넣는 문제였다.</p>

<p>처음에 <strong><code class="language-plaintext highlighter-rouge">x, y</code></strong>가 1부터 시작인지 알고 문제를 보다 이해가 안되서 질문란을 봤더니 0부터 시작이었다…(어떤 문제는 1부터 시작하던데)</p>

<p>문제는 단순하게 기본 DFS, BFS를 사용하였다. 첫 좌표가 <strong><code class="language-plaintext highlighter-rouge">*</code></strong>인 경우는 입력 그대로를 출력하고, 아닌 경우는 좌표 값을 <strong><code class="language-plaintext highlighter-rouge">*</code></strong>로 변경하고 상하좌우 좌표는 큐에 넣고 BFS 반복하면 끝이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="n">paint</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">paint</span><span class="p">.</span><span class="n">append</span><span class="p">([])</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">input</span><span class="p">():</span>
        <span class="n">paint</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
<span class="n">y</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>

<span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
<span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">paint</span><span class="p">[</span><span class="n">a</span><span class="p">][</span><span class="n">b</span><span class="p">]</span> <span class="o">==</span> <span class="s">'*'</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
    <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>

    <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
        <span class="n">paint</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="s">'*'</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
            <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="ow">and</span> <span class="n">paint</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">!=</span> <span class="s">'*'</span><span class="p">:</span>
                <span class="n">paint</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="s">'*'</span>
                <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">))</span>

<span class="n">bfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">paint</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="algorithm" /><category term="DFS/BFS" /></entry><entry><title type="html">[MongoDB] Aggregate</title><link href="http://localhost:4000/db/mongo-aggregate.html" rel="alternate" type="text/html" title="[MongoDB] Aggregate" /><published>2023-02-20T00:00:00+09:00</published><updated>2023-03-06T20:13:05+09:00</updated><id>http://localhost:4000/db/mongo-aggregate</id><content type="html" xml:base="http://localhost:4000/db/mongo-aggregate.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#mongodb-aggregate" id="markdown-toc-mongodb-aggregate">[MongoDB] Aggregate</a>    <ul>
      <li><a href="#rdb와-비교" id="markdown-toc-rdb와-비교">RDB와 비교</a></li>
      <li><a href="#예시" id="markdown-toc-예시">예시</a></li>
    </ul>
  </li>
</ul>

<h2 id="mongodb-aggregate">[MongoDB] Aggregate</h2>

<ul>
  <li>find로 처리하기 어려운 데이터를 가공하기 위한 기능</li>
  <li>pipeline 형식으로 동작하며 <strong><code class="language-plaintext highlighter-rouge">match, group, sort 등</code></strong>다양한 스테이지 값 지원 (<a href="https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/">MongoDB Aggregate Stage</a>)</li>
</ul>

<h3 id="rdb와-비교">RDB와 비교</h3>

<table>
  <thead>
    <tr>
      <th>RDB</th>
      <th>MongoDB</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>where</td>
      <td>$match</td>
    </tr>
    <tr>
      <td>group by</td>
      <td>$group</td>
    </tr>
    <tr>
      <td>having</td>
      <td>$match</td>
    </tr>
    <tr>
      <td>select</td>
      <td>$project</td>
    </tr>
    <tr>
      <td>order by</td>
      <td>$sort</td>
    </tr>
    <tr>
      <td>limit</td>
      <td>$limit</td>
    </tr>
    <tr>
      <td>sum</td>
      <td>$sum</td>
    </tr>
    <tr>
      <td>count</td>
      <td>$sum</td>
    </tr>
    <tr>
      <td>join</td>
      <td>$lookup</td>
    </tr>
  </tbody>
</table>

<h3 id="예시">예시</h3>
<ul>
  <li>data
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="p">[{</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"바나나"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">10000</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"사과"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">5000</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"딸기"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">7000</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="err">----------------------------</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"바나나"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">9000</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"사과"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">3000</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"딸기"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">8000</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="err">-----------------------------</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"사과"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">5500</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"딸기"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">7500</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"food"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"바나나"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">7700</span><span class="w">
      </span><span class="p">}</span><span class="w">
  </span><span class="p">}]</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>$match
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">db</span><span class="p">.</span><span class="n">blog</span><span class="p">.</span><span class="k">aggregate</span><span class="p">([</span>
  <span class="p">{</span> <span class="err">$</span><span class="k">match</span><span class="p">:</span> <span class="p">{</span><span class="s1">'food.name'</span><span class="p">:</span> <span class="p">{</span><span class="err">$</span><span class="n">eq</span><span class="p">:</span> <span class="s1">'바나나'</span><span class="p">}}}</span>
<span class="p">])</span>
</code></pre></div>    </div>
    <p><img src="/assets/img/post/2023-02-20/match_result.png" alt="match_result" /></p>
  </li>
  <li>$sort
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">db</span><span class="p">.</span><span class="n">blog</span><span class="p">.</span><span class="k">aggregate</span><span class="p">([</span>
  <span class="p">{</span> <span class="err">$</span><span class="k">match</span><span class="p">:</span> <span class="p">{</span><span class="s1">'food.name'</span><span class="p">:</span> <span class="p">{</span><span class="err">$</span><span class="n">eq</span><span class="p">:</span> <span class="s1">'바나나'</span><span class="p">}}},</span>
  <span class="p">{</span> <span class="err">$</span><span class="n">sort</span><span class="p">:</span> <span class="p">{</span><span class="s1">'food.price'</span><span class="p">:</span> <span class="mi">1</span><span class="p">}}</span>                 <span class="o">//</span> <span class="mi">1</span><span class="p">:</span> <span class="k">Asc</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span> <span class="k">Desc</span>
<span class="p">]);</span>
</code></pre></div>    </div>
    <p><img src="/assets/img/post/2023-02-20/sort_result.png" alt="sort_result" /></p>
  </li>
</ul>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="db" /><category term="db" /></entry><entry><title type="html">[CodeUp] 숫자등고선</title><link href="http://localhost:4000/algorithm/%EC%88%AB%EC%9E%90%EB%93%B1%EA%B3%A0%EC%84%A0.html" rel="alternate" type="text/html" title="[CodeUp] 숫자등고선" /><published>2023-02-19T00:00:00+09:00</published><updated>2023-03-06T20:13:05+09:00</updated><id>http://localhost:4000/algorithm/%EC%88%AB%EC%9E%90%EB%93%B1%EA%B3%A0%EC%84%A0</id><content type="html" xml:base="http://localhost:4000/algorithm/%EC%88%AB%EC%9E%90%EB%93%B1%EA%B3%A0%EC%84%A0.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#문제-설명" id="markdown-toc-문제-설명">문제 설명</a></li>
  <li><a href="#입력" id="markdown-toc-입력">입력</a></li>
  <li><a href="#풀이" id="markdown-toc-풀이">풀이</a></li>
</ul>

<h3 id="문제-설명">문제 설명</h3>
<p>어느날 등산을하다가 길을 찾기 위해 지도를 보다가 땅의 높낮이를 표시되어 있는 등고선을 보면서 문득 2차원 배열로 숫자등고선을 만드는 문제가 생각났다.</p>

<p>여러분들은 배열크기 N과 시작위치 X, Y를 입력받아 숫자등고선을 만드시오.</p>

<p>예를 들어 배열크기가 5이고 시작위치가 3 , 4 라면 3,4로 시작하는 다음과같은 숫자등고선을 만들수 있다.</p>

<p>6 5 4 3 4</p>

<p>5 4 3 2 3</p>

<p>4 3 2 1 2</p>

<p>5 4 3 2 3</p>

<p>6 5 4 3 4</p>

<hr />

<h3 id="입력">입력</h3>

<p>배열의 크기 N의 범위는 1&lt;=N&lt;=100 이며 좌표값 X,Y는 배열크기보다 작다.</p>

<hr />

<h3 id="풀이">풀이</h3>

<p>반복문으로 시작 위치 X, Y를 기준으로 좌표 (1,1) ~ (N,N)까지의 <strong><code class="language-plaintext highlighter-rouge">X좌표-X + Y좌표-Y</code></strong>값으로 각 좌표의 값을 구할 수도 있지만 <strong><code class="language-plaintext highlighter-rouge">DFS</code></strong>를 사용
배열의 기본 값을 0으로 해서 따로 visit 체크가 필요없는 기본적인 <strong><code class="language-plaintext highlighter-rouge">DFS</code></strong> 문제였다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">result</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="n">result</span><span class="p">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

<span class="n">dx</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
<span class="n">dy</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">):</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
    <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>

    <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
            <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">result</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">result</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">))</span>

<span class="n">bfs</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">','</span><span class="p">,</span><span class="s">''</span><span class="p">)[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="algorithm" /><category term="DFS/BFS" /></entry><entry><title type="html">[JPA] @Embedded, @Embeddable</title><link href="http://localhost:4000/java/Embedded.html" rel="alternate" type="text/html" title="[JPA] @Embedded, @Embeddable" /><published>2023-02-06T00:00:00+09:00</published><updated>2023-03-05T21:14:50+09:00</updated><id>http://localhost:4000/java/Embedded</id><content type="html" xml:base="http://localhost:4000/java/Embedded.html"><![CDATA[]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="java" /><category term="jpa" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[백준] ATM</title><link href="http://localhost:4000/algorithm/ATM.html" rel="alternate" type="text/html" title="[백준] ATM" /><published>2023-01-17T00:00:00+09:00</published><updated>2023-03-06T20:13:05+09:00</updated><id>http://localhost:4000/algorithm/ATM</id><content type="html" xml:base="http://localhost:4000/algorithm/ATM.html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#문제-설명" id="markdown-toc-문제-설명">문제 설명</a></li>
  <li><a href="#입력" id="markdown-toc-입력">입력</a></li>
  <li><a href="#풀이" id="markdown-toc-풀이">풀이</a></li>
</ul>

<h3 id="문제-설명">문제 설명</h3>

<p>인하은행에는 ATM이 1대밖에 없다. 지금 이 ATM앞에 N명의 사람들이 줄을 서있다. 사람은 1번부터 N번까지 번호가 매겨져 있으며, i번 사람이 돈을 인출하는데 걸리는 시간은 Pi분이다.</p>

<p>사람들이 줄을 서는 순서에 따라서, 돈을 인출하는데 필요한 시간의 합이 달라지게 된다. 예를 들어, 총 5명이 있고, P1 = 3, P2 = 1, P3 = 4, P4 = 3, P5 = 2 인 경우를 생각해보자.
[1, 2, 3, 4, 5] 순서로 줄을 선다면, 1번 사람은 <strong>3분</strong>만에 돈을 뽑을 수 있다. 2번 사람은 1번 사람이 돈을 뽑을 때 까지 기다려야 하기 때문에, 3+1 = <strong>4분</strong>이 걸리게 된다. 3번 사람은 1번, 2번 사람이 돈을 뽑을 때까지 기다려야 하기 때문에, 
총 3+1+4 = <strong>8분</strong>이 필요하게 된다. 4번 사람은 3+1+4+3 = <strong>11분</strong>, 5번 사람은 3+1+4+3+2 = <strong>13분</strong>이 걸리게 된다. 이 경우에 각 사람이 돈을 인출하는데 필요한 시간의 합은 3+4+8+11+13 = <strong>39분</strong>이 된다.</p>

<p>줄을 [2, 5, 1, 4, 3] 순서로 줄을 서면, 2번 사람은 <strong>1분</strong>만에, 5번 사람은 1+2 = <strong>3분</strong>, 1번 사람은 1+2+3 = <strong>6분</strong>, 4번 사람은 1+2+3+3 = <strong>9분</strong>, 3번 사람은 1+2+3+3+4 = <strong>13분</strong>이 걸리게 된다.
각 사람이 돈을 인출하는데 필요한 시간의 합은 1+3+6+9+13 = <strong>32분</strong>이다. 이 방법보다 더 필요한 시간의 합을 최소로 만들 수는 없다.</p>

<p>줄을 서 있는 사람의 수 N과 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어졌을 때, 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 구하는 프로그램을 작성하시오.</p>

<hr />

<h3 id="입력">입력</h3>

<p>첫째 줄에 사람의 수 N(1 ≤ N ≤ 1,000)이 주어진다. 둘째 줄에는 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어진다. (1 ≤ Pi ≤ 1,000)</p>

<hr />

<h3 id="풀이">풀이</h3>

<p><strong><code class="language-plaintext highlighter-rouge">뒤에 사람이 인출이 끝나는 시간 = 앞 사람이 인출하는 시간 + 본인의 인출 시간</code></strong></p>

<p>즉, <u>앞 사람 인출 시간이 적어야 된다</u>는 것을 의미합니다.</p>

<p>인출 시간이 적은 사람 순으로 정렬하여 각 배열에 이전까지 원소 값을 더해주면 Pi의 사람들의 인출하는데 걸리는 시간이 나오게 됩니다.</p>

<p>마지막으로 모든 사람의 인출 시간을 더한 값이 최소 총 인출 시간입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">p</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span>
<span class="n">p</span><span class="p">.</span><span class="n">sort</span><span class="p">()</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
    <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">print</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name>ByungJin Park</name><email>times132@gmail.com</email></author><category term="algorithm" /><category term="Greedy" /></entry></feed>